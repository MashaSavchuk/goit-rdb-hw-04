Task 1. 
Створіть базу даних для керування бібліотекою книг згідно зі структурою, наведеною нижче. 
Використовуйте DDL-команди для створення необхідних таблиць та їх зв'язків.

Структура БД

a) Назва схеми — “LibraryManagement”;

b) Таблиця "authors":
author_id (INT, автоматично зростаючий PRIMARY KEY)
author_name (VARCHAR)

c) Таблиця "genres":
genre_id (INT, автоматично зростаючий PRIMARY KEY)
genre_name (VARCHAR)

d) Таблиця "books":
book_id (INT, автоматично зростаючий PRIMARY KEY)
title (VARCHAR)
publication_year (YEAR)
author_id (INT, FOREIGN KEY зв'язок з "Authors")
genre_id (INT, FOREIGN KEY зв'язок з "Genres")

e) Таблиця "users":
user_id (INT, автоматично зростаючий PRIMARY KEY)
username (VARCHAR)
email (VARCHAR)

f) Таблиця "borrowed_books":
borrow_id (INT, автоматично зростаючий PRIMARY KEY)
book_id (INT, FOREIGN KEY зв'язок з "Books")
user_id (INT, FOREIGN KEY зв'язок з "Users")
borrow_date (DATE)
return_date (DATE);

розвязок
цей скрипт видалить схему і потім все можна за раз створити з таблицями разом 
-- drop schema if exists `LibraryManagement`;

create schema if not exists `LibraryManagement`;
use `LibraryManagement`;

create table if not exists `authors`
(
	author_id int auto_increment primary key,
	author_name varchar(50) not null
);
------------------------------------------
create table if not exists `genres`
(
	genre_id int auto_increment primary key,
	genre_name varchar(50) not null
);
------------------------------------------
create table if not exists `books`
(
	book_id int auto_increment primary key,
	title varchar(50) not null,
    publication_year year,
    author_id int not null, 
    genre_id int not null,
    
    foreign key (author_id) references authors(author_id),
    foreign key (genre_id) references genres(genre_id)
);
-------------------------------------------
create table if not exists `users`
(
	user_id int auto_increment primary key,
	username varchar(50) not null,
    email varchar(50) not null
);
-------------------------------------------
create table if not exists `borrowed_books`
(
	borrow_id int auto_increment primary key,
	book_id int not null,
    user_id int not null,
    borrow_date date not null, 
    return_date date null,
    
    foreign key (book_id) references books(book_id),
    foreign key (user_id) references users(user_id)
);


Task2. 
Заповніть таблиці простими видуманими тестовими даними. Достатньо одного-двох рядків у кожну таблицю.

розвязок
insert into authors(author_id, author_name) values(1, 'Maria Savchuk'), (2, 'Steven King');
-- or
insert into authors(author_name) values('Maria Savchuk'), ('Steven King');
select * from authors;

insert into genres(genre_name) values('drama'), ('crime');
select * from genres;

insert into books(
	title,
    publication_year,
    author_id, 
    genre_id
)
values('Beautifull day', 2010, 1, 1), ('Robo', 2000, 2, 2);
select * from books;

insert into users(username, email) values('Olha Kvitka', 'olha@ukr.net'), ('Oleksiy Bondar', 'oleksiy@ukr.net');
select * from users;

insert into borrowed_books(
	book_id,
    user_id,
    borrow_date, 
    return_date
)
values(1, 1, '2025-04-28', NULL), (2, 2, '2025-03-15', '2025-04-18');
select * from borrowed_books;


Task3. 
Перейдіть до бази даних, з якою працювали у темі 3. Напишіть запит за допомогою операторів FROM та INNER JOIN, 
що об’єднує всі таблиці даних, які ми завантажили з файлів: order_details, orders, customers, products, categories, 
employees, shippers, suppliers. Для цього ви маєте знайти спільні ключі.

Перевірте правильність виконання запиту.

розвязок
use `hw3`;
order_details, orders, products, customers, employees, shippers, categories, suppliers

select * from order_details od
inner join orders o on od.order_id = o.id
inner join products p on od.product_id = p.id

inner join customers c on o.customer_id = c.id
inner join employees e on o.employee_id = e.employee_id
inner join shippers s on o.shipper_id = s.id

inner join categories cat on p.category_id = cat.id
inner join suppliers su on p.supplier_id = su.id
;


Task 4. 
Виконайте запити, перелічені нижче.

4.1. Визначте, скільки рядків ви отримали (за допомогою оператора COUNT).
4.2. Змініть декілька операторів INNER на LEFT чи RIGHT. Визначте, що відбувається з кількістю рядків. Чому? Напишіть відповідь у текстовому файлі.
4.3. На основі запита з пункта 3 виконайте наступне: оберіть тільки ті рядки, де employee_id > 3 та ≤ 10.
4.4. Згрупуйте за іменем категорії, порахуйте кількість рядків у групі, середню кількість товару (кількість товару знаходиться в order_details.quantity)
4.5. Відфільтруйте рядки, де середня кількість товару більша за 21.
4.6. Відсортуйте рядки за спаданням кількості рядків.
4.7. Виведіть на екран (оберіть) чотири рядки з пропущеним першим рядком.

розвязок
4.1. Визначте, скільки рядків ви отримали (за допомогою оператора COUNT).
select count(*) from order_details od
inner join orders o on od.order_id = o.id
inner join products p on od.product_id = p.id
inner join customers c on o.customer_id = c.id
inner join employees e on o.employee_id = e.employee_id
inner join shippers s on o.shipper_id = s.id
inner join categories cat on p.category_id = cat.id
inner join suppliers su on p.supplier_id = su.id
;

4.2. Змініть декілька операторів INNER на LEFT чи RIGHT. Визначте, що відбувається з кількістю рядків. 
Чому? Напишіть відповідь у текстовому файлі.

select count(*) from order_details od
inner join orders o on od.order_id = o.id
right join products p on od.product_id = p.id
left join customers c on o.customer_id = c.id
right join employees e on o.employee_id = e.employee_id
right join shippers s on o.shipper_id = s.id
right join categories cat on p.category_id = cat.id
inner join suppliers su on p.supplier_id = su.id
;

Відповідь: незважаючи на зміну типів JOIN, основна структура з'єднань не впливає на результуючий набір, 
оскільки всі зв'язки мають відповідні значення. Тому загальна кількість рядків залишається на рівні 518, тобто незмінною.

4.3. На основі запита з пункта 3 виконайте наступне: оберіть тільки ті рядки, де employee_id > 3 та ≤ 10.

select * from order_details od
inner join orders o on od.order_id = o.id
inner join products p on od.product_id = p.id
inner join customers c on o.customer_id = c.id
inner join employees e on o.employee_id = e.employee_id
inner join shippers s on o.shipper_id = s.id
inner join categories cat on p.category_id = cat.id
inner join suppliers su on p.supplier_id = su.id
where e.employee_id > 3 and e.employee_id <= 10
;

4.4. Згрупуйте за іменем категорії, порахуйте кількість рядків у групі, середню кількість товару 
(кількість товару знаходиться в order_details.quantity)

select cat.name, count(*), avg(od.quantity) from order_details od
inner join orders o on od.order_id = o.id
inner join products p on od.product_id = p.id
inner join customers c on o.customer_id = c.id
inner join employees e on o.employee_id = e.employee_id
inner join shippers s on o.shipper_id = s.id
inner join categories cat on p.category_id = cat.id
inner join suppliers su on p.supplier_id = su.id
where e.employee_id > 3 and e.employee_id <= 10
group by cat.name
;

4.5. Відфільтруйте рядки, де середня кількість товару більша за 21.

select cat.name, count(*), avg(od.quantity) as average from order_details od
inner join orders o on od.order_id = o.id
inner join products p on od.product_id = p.id
inner join customers c on o.customer_id = c.id
inner join employees e on o.employee_id = e.employee_id
inner join shippers s on o.shipper_id = s.id
inner join categories cat on p.category_id = cat.id
inner join suppliers su on p.supplier_id = su.id
where e.employee_id > 3 and e.employee_id <= 10
group by cat.name
having average > 21
;

4.6. Відсортуйте рядки за спаданням кількості рядків.

select cat.name, count(*) as numb, avg(od.quantity) as average from order_details od
inner join orders o on od.order_id = o.id
inner join products p on od.product_id = p.id
inner join customers c on o.customer_id = c.id
inner join employees e on o.employee_id = e.employee_id
inner join shippers s on o.shipper_id = s.id
inner join categories cat on p.category_id = cat.id
inner join suppliers su on p.supplier_id = su.id
where e.employee_id > 3 and e.employee_id <= 10
group by cat.name
having average > 21
order by numb desc
;

4.7. Виведіть на екран (оберіть) чотири рядки з пропущеним першим рядком.

select cat.name, count(*) as numb, avg(od.quantity) as average from order_details od
inner join orders o on od.order_id = o.id
inner join products p on od.product_id = p.id
inner join customers c on o.customer_id = c.id
inner join employees e on o.employee_id = e.employee_id
inner join shippers s on o.shipper_id = s.id
inner join categories cat on p.category_id = cat.id
inner join suppliers su on p.supplier_id = su.id
where e.employee_id > 3 and e.employee_id <= 10
group by cat.name
having average > 21
order by numb desc
limit 4 offset 1
;
